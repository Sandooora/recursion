class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def create_list_recursive(arr, index=0):
    if index >= len(arr):
        return None
    node = ListNode(arr[index])
    node.next = create_list_recursive(arr, index + 1)
    return node


def swap_pairs_recursive(head):
    if not head or not head.next:
        return head
    first = head
    second = head.next
    first.next = swap_pairs_recursive(second.next)
    second.next = first
    return second


def swap_pairs_tail_recursive(head):
    def helper(prev, curr):
        if not curr or not curr.next:
            if prev:
                prev.next = curr
            else:
                nonlocal new_head
                new_head = curr  
            return
        next_pair = curr.next.next
        second = curr.next
        second.next = curr
        curr.next = None
        if prev:
            prev.next = second
        else:
            new_head = second
        helper(curr, next_pair)

    new_head = None
    helper(None, head)
    return new_head


def print_list_recursive(head):
    def helper(node):
        if not node:
            return ""
        if not node.next:
            return str(node.val)
        return str(node.val) + " "+ helper(node.next)

    output = helper(head)
    print(output if output else "[]")


def main():
    raw_input_str = input("Введіть значення вузлів через пробіл (наприклад: 1 2 3 4): ").strip()

    if not raw_input_str:
        print("Результат (Головна рекурсія): []")
        print("Результат (Хвостова рекурсія): []")
        return

    try:
        values = list(map(int, raw_input_str.split()))
    except ValueError:
        print("Помилка: введіть лише числа через пробіл.")
        return

    if any(val < 0 or val > 100 for val in values):
        print("Помилка: значення повинні бути в межах 0–100.")
        return

    head1 = create_list_recursive(values)
    swapped1 = swap_pairs_recursive(head1)
    print("\nРезультат (Головна рекурсія):")
    print_list_recursive(swapped1)

 
    head2 = create_list_recursive(values)
    swapped2 = swap_pairs_tail_recursive(head2)
    print("\nРезультат (Хвостова рекурсія):")
    print_list_recursive(swapped2)

main()


